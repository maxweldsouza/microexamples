#TODO C compilation
import os
import build
env = Environment()

build.buildcode()

def buildC():
    Program('#languages/c/printing/ex001.c')

#Python
bld = Builder(action = 'python $SOURCE 2>&1 | tee $TARGET')
env.Append(BUILDERS = {'Python' : bld})

#Common Lisp
bld = Builder(action = 'clisp $SOURCE 2>&1 | tee $TARGET')
env.Append(BUILDERS = {'CLisp' : bld})

#Clojure
bld = Builder(action = 'clojure $SOURCE 2>&1 | tee $TARGET')
env.Append(BUILDERS = {'Clojure' : bld})

#Haskell
bld = Builder(action = 'runghc $SOURCE 2>&1 | tee $TARGET')
env.Append(BUILDERS = {'Haskell' : bld})

#Regex
bld = Builder(action = 'python $SOURCE 2>&1 | tee $TARGET')
env.Append(BUILDERS = {'Regex' : bld})

#Ruby
bld = Builder(action = 'ruby $SOURCE 2>&1 | tee $TARGET')
env.Append(BUILDERS = {'Ruby' : bld})

#Javascript
bld = Builder(action = 'nodejs $SOURCE 2>&1 | tee $TARGET')
env.Append(BUILDERS = {'Javascript' : bld})

def buildLang(dir, ext, lang):
    def callEnv(target, source):
        if lang == 'python':
            env.Python(**locals())
        if lang == 'clisp':
            env.CLisp(**locals())
        if lang == 'clojure':
            env.Clojure(**locals())
        if lang == 'haskell':
            env.Haskell(**locals())
        if lang == 'regex':
            env.Regex(**locals())
        if lang == 'ruby':
            env.Ruby(**locals())
        if lang == 'javascript':
            env.Javascript(**locals())

    def mkfile(dir):
        files = [ f for f in os.listdir(dir) if f.endswith(ext)]
        for source in files:
            target = source.replace(ext, '.out')
            source = os.path.join(dir, source)
            target = os.path.join(dir, target)
            callEnv(target, source)

    dirs = [d for d in os.listdir(dir)]
    for d in dirs:
        full = os.path.join(dir, d)
        mkfile(full)

buildLang('languages/python', '.py', 'python')
buildLang('languages/clisp', '.lisp', 'clisp')
#buildLang('languages/clojure', '.clj', 'clojure')
buildLang('languages/haskell', '.hs', 'haskell')
buildLang('languages/regex', '.py', 'regex')
#buildLang('languages/ruby', '.rb', 'ruby')
#buildLang('languages/javascript', '.js', 'javascript')
